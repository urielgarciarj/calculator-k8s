name: Deploy to Kubernetes

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update kube config
        run: aws eks update-kubeconfig --name calculator-eks-dev --region us-east-1
        
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
      - name: Deploy to Kubernetes
        run: |
          # Determinar el entorno
          ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
          
          # Aplicar los manifiestos usando kustomize
          kubectl apply -k overlays/$ENVIRONMENT/
          
          # Esperar a que el deployment esté listo
          kubectl rollout status deployment/calculator-app -n calculator-$ENVIRONMENT --timeout=300s
          
      - name: Verify deployment
        run: |
          # Determinar el entorno
          ENVIRONMENT="${{ github.event.inputs.environment || 'development' }}"
          
          # Verificar que los pods estén corriendo
          kubectl get pods -n calculator-$ENVIRONMENT
          
          # Verificar que el servicio esté disponible
          kubectl get svc -n calculator-$ENVIRONMENT
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi 